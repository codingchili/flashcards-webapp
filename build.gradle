import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

project.version = "1.0.14"
project.group = 'com.codingchili.flashcards'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencies {
    compile 'com.github.codingchili.chili-core:core:1.0.21-SNAPSHOT@jar'
    compile 'org.web3j:core:2.3.1@jar'
}

test {
    testLogging {
        exceptionFormat "full"
    }
    reports.html.enabled = false
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

ext {
    polymerBin = Os.isFamily(Os.FAMILY_WINDOWS) ? 'polymer.cmd' : 'polymer'
    bowerBin = Os.isFamily(Os.FAMILY_WINDOWS) ? 'bower.cmd' : 'bower'
}

task polymer {
    doLast {
        exec {
            workingDir "./polymer"
            commandLine = [bowerBin, "install"]
        }
        exec {
            workingDir "./polymer"
            commandLine = [polymerBin, "build"]
        }
    }
}

jar {
    zip64 true
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': 'flashcards',
                'Implementation-Version': version,
                'Main-Class': 'com.codingchili.flashcards.Service'
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.DSA', 'META-INF/*.SF'
}

task archiveZip(type: Zip, dependsOn: [subprojects.jar, polymer]) {
    baseName = 'flashcards'

    from('script') {
        fileMode = 0755
        include '**/run.sh'
        include '**/run.bat'
        expand(jar: jar.outputs.files[0].name, app: project.name, version: project.version)
    }

    from (jar.outputs.files) {
        into('/')
    }

    /*from('data') {
        into('/data/')
    }*/

    from('./') {
        include 'application.json'
        into('/')
    }

    from('polymer/build/default/') {
        into('/polymer')
    }

    into('/')
}

task alljavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

task archiveJavadoc(type: Zip, dependsOn: alljavadoc) {
    baseName = 'javadocs'
    from fileTree(file("${buildDir}/docs/javadoc"))
}